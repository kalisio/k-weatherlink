import _ from 'lodash'
import { hooks } from '@kalisio/krawler'
import { signParam } from './weatherlink-signature.js';

const dbUrl = process.env.DB_URL || 'mongodb://127.0.0.1:27017/weatherlink'
const API_KEY = process.env.API_KEY
const API_SECRET = process.API_SECRET


let generateTask = (options) => {
    // We need to sign each request with the API_KEY and API_SECRET and a timestamp (t)
    return (hook) => {
        // We define the optional parameters of the request (here we only need the api-key and api-signature and t parameters, they are generated by the signParam function)
        // e.g. let param = { "station_id": 56, "start-timestamp : 1614556800, "end-timestamp" : 1614643200} 
        let param = null
        param = signParam(param,API_KEY,API_SECRET)
        let task = {
            id : 0,
            options: {
                url:  options.baseUrl + 'api-key=' + param["api-key"] + '&api-signature=' + param["api-signature"] + '&t=' + param["t"],
            }
        }
        hook.data.tasks = [task]
        return hook
    }
}

hooks.registerHook('generateTask', generateTask)


export default {
    id: 'weatherlink-stations',
    store: 'memory',
    options: {
      workersLimit: 1,
      faultTolerant: true,
    },
    taskTemplate: {
      id: 'stations/<%= taskId %>',
      type: 'http',
      attemptsLimit : 5
    },
    hooks: {
      tasks: {
        after: {
          readJson: {},
          apply: {
            function: (item) => {
                let stations=[]
                _.forEach(item.data.stations, (station) => {
                    let stationJSON = {
                        type: 'Feature',
                        geometry: {
                            type: 'Point',
                            coordinates: [station.longitude, station.latitude]
                        },
                        properties: { ...station }

                    }
                    console.log("station discovered : " + stationJSON.properties.station_name + " (id: " + stationJSON.properties.station_id + ")")
                    stations.push(stationJSON)
                })
                item.data = stations

              }
          },
          updateMongoCollection: {
            collection: 'weatherlink-stations',
            filter: { 'properties.station_id': '<%= properties.station_id %>' },
            upsert : true,
            chunkSize: 256
          },
          clearData: {}
        },
        error: {
          apply: {
            function: (item) => {
              console.error('Error ' + item.error)
            }
           }
        }
      },
      jobs: {
        before: {
          createStores: { id: 'memory' },
          connectMongo: {
            url: dbUrl,
            // Required so that client is forwarded from job to tasks
            clientPath: 'taskTemplate.client'
          },
          createMongoCollection: {
            clientPath: 'taskTemplate.client',
            collection: 'weatherlink-stations',
            indices: [
              [{ 'properties.station_id': 1 }, { unique: true }], 
              { geometry: '2dsphere' }
            ]
          },
          generateTask: {
            baseUrl : "https://api.weatherlink.com/v2/stations?",
          }
        },
        after: {
          disconnectMongo: {
            clientPath: 'taskTemplate.client'
          },
          removeStores: [ 'memory' ]
        },
        error: {
          disconnectMongo: {
            clientPath: 'taskTemplate.client'
          },
          removeStores: [ 'memory' ]
        }
      }
    }
  }
  